DROP TABLE IF EXISTS comments CASCADE;
DROP TABLE IF EXISTS news CASCADE;
DROP TABLE IF EXISTS users  CASCADE;


CREATE TABLE comments
(
    id             INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text           VARCHAR(300),
    inserted_by_id INTEGER,
    id_news        INTEGER,
    creation_date  date DEFAULT NOW(),
    CONSTRAINT pk_comments PRIMARY KEY (id)
);

CREATE TABLE news
(
    id             INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title          VARCHAR(150),
    text           VARCHAR(2000),
    inserted_by_id INTEGER,
    updated_by_id  INTEGER,
    creation_date  date DEFAULT NOW(),
    last_edit_date date DEFAULT NOW(),
    CONSTRAINT pk_news PRIMARY KEY (id)
);

CREATE TABLE users
(
    id             INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    username       VARCHAR(40)                              NOT NULL,
    password       VARCHAR(80),
    name           VARCHAR(20),
    surname        VARCHAR(20),
    parent_name    VARCHAR(20),
    role           VARCHAR(255) DEFAULT 'ROLE_SUBSCRIBER',
    creation_date  date         DEFAULT NOW(),
    last_edit_date date         DEFAULT NOW(),
    CONSTRAINT pk_users PRIMARY KEY (id)
);

ALTER TABLE users
    ADD CONSTRAINT users_pk UNIQUE (username);

ALTER TABLE comments
    ADD CONSTRAINT fk_comments_on_id_news FOREIGN KEY (id_news) REFERENCES news (id) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE comments
    ADD CONSTRAINT fk_comments_on_inserted_by FOREIGN KEY (inserted_by_id) REFERENCES users (id) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE news
    ADD CONSTRAINT fk_news_on_inserted_by FOREIGN KEY (inserted_by_id) REFERENCES users (id) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE news
    ADD CONSTRAINT fk_news_on_updated_by FOREIGN KEY (updated_by_id) REFERENCES users (id) ON UPDATE NO ACTION ON DELETE NO ACTION;

create function update_last_edit_date() returns trigger
    language plpgsql
as
$$
BEGIN
    NEW.last_edit_date = now();
    RETURN NEW;
END;
$$;

alter function update_last_edit_date() owner to postgres;


create trigger update_edit_time
    before update
    on users
    for each row
execute procedure update_last_edit_date();

create trigger update_edit_time
    before update
    on news
    for each row
execute procedure update_last_edit_date();
